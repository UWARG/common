"""
Communication device class
"""

import io
import libscrc
import serial
from .helper import decode_msg


class GenericCommsDevice():
    """
    Base communication device that serializes and deserializes messages
    """

    def __init__(self, port: str, baudrate: int):
        self.current_msg = io.BytesIO()
        self.length = -1
        self.ser = serial.Serial(
            port=port, baudrate=baudrate, bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE
        )

    @staticmethod
    def __get_crc32(b_in: bytes) -> int:
        """
        """
        return libscrc.crc32(b_in)

    def transmit(self, msg) -> None:
        """
        Expects a TelemMessages object
        """
        buf = io.BytesIO()
        # Accessing LCM autogenerated method
        # pylint: disable=[protected-access]
        msg._encode_one(buf)
        print("length: ", len(buf.getbuffer().tobytes()))

        # length currently includes whatever data is being sent but dont include crc (which isnt included anyway)
        # doesnt include length (which is also empty right now) and start flag and type variable (2 bytes)
        msg.header.length = buf.getbuffer().tobytes() - 2

        # pylint: enable=[protected-access]
        crc32 = self.__get_crc32(buf.getbuffer().tobytes())
        msg.crc = crc32.to_bytes(4, 'big')
        buf = io.BytesIO()
        # Accessing LCM autogenerated method
        # pylint: disable=[protected-access]
        msg._encode_one(buf)
        print("buffer size: ", len(buf.getbuffer().tobytes()))
        # pylint: enable=[protected-access]
        self.ser.write(buf.getbuffer().tobytes())

    def receive(self):
        """
        Receives a single message and returns a tuple of (bool, TelemMessages object)
        Blocking call
        """
        while self.ser.inWaiting():
            read_byte = self.ser.read()[0]
            self.current_msg.write(read_byte.to_bytes(1, 'big'))

            if read_byte == 0x7e and self.length == -1:
                # start of new message
                print("test")
                length_bytes = self.ser.read(size=2)
                self.length = int.from_bytes(length_bytes, 'big')
                print("length: ", self.length)
                self.current_msg.write(length_bytes)
            else:
                if len(self.current_msg.getbuffer()) == self.length + 8:
                    print("debug")
                    # check crc
                    raw_data = self.current_msg.getbuffer().tobytes()
                    calc_crc32 = self.__get_crc32(raw_data[4:-4])
                    msg_crc32 = int.from_bytes(raw_data[-4:], 'big')
                    print("calculated CRC32", calc_crc32)
                    print("sent crc", msg_crc32)
                    if msg_crc32 == calc_crc32:
                        self.current_msg.seek(0)
                        out = decode_msg(self.current_msg)
                        self.length = -1
                        self.current_msg = io.BytesIO()
                        print("success")
                        return True, out
                    else:
                        print("failed crc")
                        self.length = -1
                        self.current_msg = io.BytesIO()
                        return False, None

        return False, None

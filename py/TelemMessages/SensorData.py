"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class SensorData(object):
    __slots__ = ["latitude", "longitude", "altitude", "climb_rate", "heading", "air_speed", "ground_speed", "roll", "pitch", "yaw", "roll_rate", "pitch_rate", "yaw_rate"]

    __typenames__ = ["double", "double", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.latitude = 0.0
        self.longitude = 0.0
        self.altitude = 0.0
        self.climb_rate = 0.0
        self.heading = 0.0
        self.air_speed = 0.0
        self.ground_speed = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.roll_rate = 0.0
        self.pitch_rate = 0.0
        self.yaw_rate = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(SensorData._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddfffffffffff", self.latitude, self.longitude, self.altitude, self.climb_rate, self.heading, self.air_speed, self.ground_speed, self.roll, self.pitch, self.yaw, self.roll_rate, self.pitch_rate, self.yaw_rate))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SensorData._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SensorData._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SensorData()
        self.latitude, self.longitude, self.altitude, self.climb_rate, self.heading, self.air_speed, self.ground_speed, self.roll, self.pitch, self.yaw, self.roll_rate, self.pitch_rate, self.yaw_rate = struct.unpack(">ddfffffffffff", buf.read(60))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SensorData in parents: return 0
        tmphash = (0xc7cffe8566e8465c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SensorData._packed_fingerprint is None:
            SensorData._packed_fingerprint = struct.pack(">Q", SensorData._get_hash_recursive([]))
        return SensorData._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SensorData._get_packed_fingerprint())[0]

